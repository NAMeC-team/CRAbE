use crate::action::ActionWrapper;
use crate::manager::manual::Manual;
use crate::manager::bigbro::BigBro;
use crate::manager::test_manager::TestManager;
use crate::manager::Manager;
use clap::Args;
use crabe_framework::component::{Component, DecisionComponent};
use crabe_framework::config::CommonConfig;
use crabe_framework::data::output::CommandMap;
use crabe_framework::data::tool::ToolData;
use crabe_framework::data::world::World;

/// The `DecisionConfig` struct is used to hold configuration options for the decision pipeline.
#[derive(Args)]
pub struct DecisionConfig {}

/// The `DecisionPipeline` struct represents the decision-making pipeline used by the robot.
/// It consists of an action wrapper and a manager, both of which can be customized
/// by implementing the `ActionWrapper` and `Manager` traits respectively.
/// The step method takes in a `World` object and returns a tuple containing
/// the command map and tool data generated by the pipeline.
pub struct DecisionPipeline {
    action_wrapper: ActionWrapper,
    manager: Box<dyn Manager>,
}

impl DecisionPipeline {
    /// Creates a new `DecisionPipeline` instance with the given configuration and common configuration options.
    pub fn with_config(_decision_cfg: DecisionConfig, _common_cfg: &CommonConfig) -> Self {
        Self {
            action_wrapper: ActionWrapper::default(),
            manager: Box::new(BigBro::new()),
        }
    }
}

impl Component for DecisionPipeline {
    /// Closes the decision pipeline component.
    fn close(self) {}
}

impl DecisionComponent for DecisionPipeline {
    /// Runs a single step of the decision-making pipeline using the given `World` data.
    fn step(&mut self, world: &World) -> (CommandMap, ToolData) {
        // TODO : Don't create ToolsData here
        let mut tool_data = ToolData::default();
        self.manager
            .step(world, &mut tool_data, &mut self.action_wrapper);

        (
            self.action_wrapper.compute(world, &mut tool_data),
            tool_data,
        )
    }
}
